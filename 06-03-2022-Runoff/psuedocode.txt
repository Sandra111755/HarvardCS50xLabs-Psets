main objectives:

finish functions~  vote, tabulate, print_winner, find_min, is_tie, and eliminate
------------------------------------
vote:

    The function takes arguments voter, rank, and name.
    If name is a match for the name of a valid candidate, then you should update the global preferences array
    to indicate that the voter voter has that candidate as their rank preference
    (where 0 is the first preference, 1 is the second preference, etc.).

    If the preference is successfully recorded, the function should return true; the function should return
    false otherwise (if, for instance, name is not the name of one of the candidates).

    You may assume that no two candidates will have the same name.

Hints

    Recall that candidate_count stores the number of candidates in the election.
    Recall that you can use strcmp to compare two strings.
    Recall that preferences[i][j] stores the index of the candidate who is the jth ranked preference for the ith voter.
----------------

//record vote unless its invalid

Bool vote(int voter, int rank, string name)

for candidate_count
    if (strcasecmp(candidates[i].name, name) == 0)
        preferences [voter][rank] = i
        return true

------------------------------------

tabulate:

    The function should update the number of votes each candidate has at this stage in the runoff.

    Recall that at each stage in the runoff, every voter effectively votes for their top-preferred
    candidate who has not already been eliminated.

Hints

    Recall that voter_count stores the number of voters in the election and that,
    for each voter in our election, we want to count one ballot.

    Recall that for a voter i, their top choice candidate is represented by
    preferences[i][0], their second choice candidate by preferences[i][1], etc.

    Recall that the candidate struct has a field called eliminated, which will be
    true if the candidate has been eliminated from the election.

    Recall that the candidate struct has a field called votes, which you’ll likely
    want to update for each voter’s preferred candidate.

    Once you’ve cast a vote for a voter’s first non-eliminated candidate, you’ll want to stop there,
    not continue down their ballot! Recall that you can break out of a loop early using break inside of a conditional

update candidates.votes ++ with top prefered candidate

use voter_count
call preferences array for vote to update candidates struct
call candidates.elimnated
call candidates.votes
stop once voted using break

// Calculate votes given remaining candidates
       tabulate();

void tabulate(void)

    for int i < voter_count
        for int j < candidate count
            if candidates[preferences[i][j]].eliminated == false
                candidates[preferences[i][j]].votes++
                break

---------------------------

print winner:

    If any candidate has more than half of the vote, their name should be printed and the function should return true.

    If nobody has won the election yet, the function should return false.

Hints

    Recall that voter_count stores the number of voters in the election. Given that,
    how would you express the number of votes needed to win the election?

        bool won = print_winner();
        if (won)
        {
            break;
        }

// Print the winner of the election, if there is one
bool print_winner(void)

for candidate_count i
    if (candidates[i].votes > (vote_count) / 2)
        print winner
        return true
    return false

---------------------------

find_min:

    The function should return the minimum vote total for any candidate who is still in the election.

Hints

    You’ll likely want to loop through the candidates to find the one who is
    both still in the election and has the fewest number of votes.

    What information should you keep track of as you loop through the candidates?

int min = find_min();

// Return the minimum number of votes any remaining candidate has
int find_min(void)

min = voter_count;
for candidate count i
    if candidates[i].eliminated = false && candidates[i].eliminated < min
    min = candidates[i].votes

    return min



---------------------------

is_tie:

    The function takes an argument min, which will be the minimum number of votes that anyone in the election currently has.

    The function should return true if every candidate remaining in the election has the
    same number of votes, and should return false otherwise.

Hints

    Recall that a tie happens if every candidate still in the election has the same number of
    votes. Note, too, that the is_tie function takes an argument min, which is the smallest number of votes any candidate currently has.

    How might you use that information to determine if the election is a tie (or, conversely, not a tie)

bool tie = is_tie(min);

// Return true if the election is tied between all candidates, false otherwise
bool is_tie(int min)

int remainingcandidates = 0
int count = 0

for candidate_count i
    if candidates[i].eliminated == false
        remainingcandidates++
    if candidates[i].vote = min
        count++
    if remaining candidates == count
    return true
return false

---------------------------

eliminate:

    The function takes an argument min, which will be the minimum number of votes that anyone in the election currently has.
    The function should eliminate the candidate (or candidates) who have min number of votes.

eliminate(min);

// Eliminate the candidate (or candidates) in last place
void eliminate(int min)

for candidate count i
    if candidates[i].votes == min
        candidates[i].eliminated = true


---------------------------
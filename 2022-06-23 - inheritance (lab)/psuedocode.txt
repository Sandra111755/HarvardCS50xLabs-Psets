---------------------------------------------------------------

// Create a new individual with `generations`
person *create_family(int generations)
{
    // TODO: Allocate memory for new person
    person *p = malloc(sizeof(person));

    // If there are still generations left to create
    if (generations > 1)
    {
        // Create two new parents for current person by recursively calling create_family
        person *parent0 = create_family(generations - 1);
        person *parent1 = create_family(generations - 1);

        // TODO: Set parent pointers for current person
        p->parents[0] = parent0;
        p->parents[1] = parent1;

        // TODO: Randomly assign current person's alleles based on the alleles of their parents

        p->alleles[0] = p->parents[0]->alleles[rand() % 2];
        p->alleles[1] = p->parents[1]->alleles[rand() % 2];

    }

    // If there are no generations left to create
    else
    {
        // TODO: Set parent pointers to NULL

        p->parents[0] = NULL;
        p->parents[1] = NULL;

        // TODO: Randomly assign alleles

        p->alleles[0] = random_allele();
        p->alleles[1] = random_allele();

    }

    // TODO: Return newly created person
    return p;
}

create family
    malloc for a new person
    if generations > 1
    recursively create previous generations
        update the new persons parents
        inherit alleles from parents
    if generations == 1
        set parents to null
        randomly generate alleles
    return person




    // Free `p` and all ancestors of `p`.
void free_family(person *p)
{
    // TODO: Handle base case
    if (p == NULL)
    return;

    // TODO: Free parents recursively
    free_family(p->parents[0]);
    free_family(p->parents[1]);

    // TODO: Free child

    free(p);

}

free family
    base case handle input of null
    return

    free family recursively
    free_family(parents[0])
    free_family(parents[1])

    free person p